# Thomas Merkel <tm@core.io>

# use root to set own env
function root {
	case ${TM_OS} in
		Darwin)
			sudo -i "/opt/pkg/bin/bash --rcfile $(echo ${TM_HOME})/.bashrc"
		;;
		FreeBSD)
			sudo /usr/local/bin/bash --rcfile $(echo ${TM_HOME})/.bashrc
		;;
		*)
			sudo /bin/bash --rcfile $(echo ${TM_HOME})/.bashrc
		;;
	esac
}

# ssh with screen
function sshs {
	ssh $@ -t screen
}

# chmown 750 www:sdad target
function chmown {
	chmod $1 $3
	chown $2 $3
}

# chmod_fd 644 755
function chmod_fd {
	find . -type f -exec chmod $1 {} \;
	find . -type d -exec chmod $2 {} \;
}

# chown_fd tmerkel:audio root:audio
function chown_fd {
	find . -type f -exec chown $1 {} \;
	find . -type d -exec chown $2 {} \;
}

## pssh: http://code.google.com/p/parallel-ssh/
## i=interactive
function psshi() {
	local -a psshopts=( -p 10 -t 0 -X "-q" -X "-T" -O LogLevel=INFO )
	local psshdir="${HOME}/.pssh"
	local hostfile="${psshdir}/hostgroups/${1}"; shift
	[[ ! -d "${psshdir}" ]] && return 2
	[[ ! -f "${hostfile}" || ! -s "${hostfile}" ]] && return 2
	[[ -z "${@}" ]] && return 2
	pssh "${psshopts[@]}" -h "${hostfile}" -i "${@}"
}

## c=capture
function psshc() {
	local -a psshopts=( -p 10 -t 0 -X "-q" -X "-T" -O LogLevel=INFO )
	local psshdir="${HOME}/.pssh"
	local workdir="${psshdir}/work/${$}.${RANDOM}"
	local outdir="${workdir}/out"
	local errdir="${workdir}/err"
	local hostfile="${psshdir}/hostgroups/${1}"; shift
	[[ ! -d "${psshdir}" ]] && return 2
	[[ ! -d "${workdir}" ]] && mkdir -pv "${workdir}" || return 2
	[[ ! -d "${outdir}" ]] && mkdir -pv "${outdir}" || return 2
	[[ ! -d "${errdir}" ]] && mkdir -pv "${errdir}" || return 2
	[[ ! -f "${hostfile}" || ! -s "${hostfile}" ]] && return 2
	[[ -z "${@}" ]] && return 2
	pssh "${psshopts[@]}" -h "${hostfile}" -o "${outdir}" -e "${errdir}" "${@}"
	pushd "${workdir}" &>/dev/null && (bash; true) && popd &>/dev/null 
	rm -rfv "${workdir}"
}

## shmux: http://web.taranis.org/shmux/
## i=interactive
function shmuxi() {
	local -a shmuxopts=( -M 10 -S all -C 600s -m )
	local shmuxdir="${HOME}/.shmux"
	#local hostfile="${shmuxdir}/hostgroups/${1}"; shift
	local hostfile="${HOME}/.pssh/hostgroups/${1}"; shift
	[[ ! -d "${shmuxdir}" ]] && return 2
	[[ ! -f "${hostfile}" || ! -s "${hostfile}" ]] && return 2
	[[ -z "${@}" ]] && return 2
	SHMUX_SSH_OPTS="-q -T -o LogLevel=INFO" \
		shmux "${shmuxopts[@]}" -c "${*}" - < <( egrep -v '^#' "${hostfile}" )
}

## c=capture
function shmuxc() {
	local -a shmuxopts=( -M 10 -S all -C 600s -m )
	local shmuxdir="${HOME}/.shmux"
	local workdir="${shmuxdir}/work/${$}.${RANDOM}"
	#local hostfile="${shmuxdir}/hostgroups/${1}"; shift
	local hostfile="${HOME}/.pssh/hostgroups/${1}"; shift
	[[ ! -d "${shmuxdir}" ]] && return 2
	[[ ! -d "${workdir}" ]] && mkdir -pv "${workdir}" || return 2
	[[ ! -f "${hostfile}" || ! -s "${hostfile}" ]] && return 2
	[[ -z "${@}" ]] && return 2
	SHMUX_SSH_OPTS="-q -T -o LogLevel=INFO" \
		shmux "${shmuxopts[@]}" -o "${workdir}" -c "${*}" - < <( egrep -v '^#' "${hostfile}" )
	pushd "${workdir}" &>/dev/null && (bash; true) && popd &>/dev/null 
	rm -rfv "${workdir}"
}

# simple python http server
# httpserv [port]
function httpserv() {
	python2.7 -m SimpleHTTPServer ${1}
}

function httpserv3() {
	python -m http.server ${1}
}

# mkdir && cd to created folder
function mcd() {
	mkdir ${1} && cd ${1}
}

# finder.app cd helper script
function pfd() {
	osascript 2>/dev/null <<EOF
		tell application "Finder"
			return POSIX path of (target of window 1 as alias)
		end tell
EOF
}

function cdf() {
	cd "$(pfd)"
}

# Switch to different dz environments, requires bash, jq, shuf and dz
vdz() {
	DZ_ENV=${1}
	DZ_ENV_FILE=~/.dz/env.json
	if [[ ! -f ${DZ_ENV_FILE} ]]; then
		echo "Missing ${DZ_ENV_FILE}"
		return 1
	fi

	# Print environments
	if [[ ! -n ${DZ_ENV} ]]; then
		echo "Usage: vdz [--deactivate|environment]"
		echo
		echo "Available environments:"
		jq -r ".environments | keys[]" ${DZ_ENV_FILE} | while read env; do
			echo "  ${env}"
		done
		echo
		echo "Options:"
		echo "  --deactivate"
		return 2
	fi

	# Unset all env variables we use
	if [[ ${DZ_ENV} =~ "deactivate" ]]; then
		echo "Unset your current deploy-zone environment"
		unset DZ_BUILD_HOST DZ_BUILD_TEMPLATE DZ_BUILD_PUBLISH_URL DZ_BUILD_MIN_PLATFORM VIRTUAL_ENV
		return 0
	fi

	# Create DZ_BUILD_HOST
	DZ_BUILD_HOST=$(jq -r ".build_hosts[]" ${DZ_ENV_FILE} | shuf -n1)

	# Get ENV information
	if [[ $(jq ".environments.${DZ_ENV}" ${DZ_ENV_FILE}) == "null" ]]; then
		echo "Missing environment \"${DZ_ENV}\", check your ${DZ_ENV_FILE}"
		return 3
	fi
	DZ_BUILD_TEMPLATE=$(jq -r ".environments.${DZ_ENV}.template_file" ${DZ_ENV_FILE})
	DZ_BUILD_PUBLISH_URL=$(jq -r ".environments.${DZ_ENV}.publish_url" ${DZ_ENV_FILE})
	DZ_BUILD_MIN_PLATFORM=$(jq -r ".environments.${DZ_ENV}.min_platform" ${DZ_ENV_FILE})

	# Use existing virtual environment variable
	VIRTUAL_ENV=${DZ_ENV}
	# Export the Information
	export DZ_BUILD_HOST DZ_BUILD_TEMPLATE DZ_BUILD_PUBLISH_URL DZ_BUILD_MIN_PLATFORM VIRTUAL_ENV
	echo "Switching to deploy-zone environment: ${DZ_ENV}"
}

# Coloured man pages
man () {
	LESS_TERMCAP_mb=$'\e[1;31m' \
	LESS_TERMCAP_md=$'\e[1;31m' \
	LESS_TERMCAP_me=$'\e[0m' \
	LESS_TERMCAP_se=$'\e[0m' \
	LESS_TERMCAP_so=$'\e[1;44;33m' \
	LESS_TERMCAP_ue=$'\e[0m' \
	LESS_TERMCAP_us=$'\e[1;32m' \
		command man "$@"
}

# vim:ft=sh
